-- VHDL Entity My_Lib.avg_four.symbol
--
-- Created:
--          by - mg28.bin (srge08.ecn.purdue.edu)
--          at - 19:58:28 09/09/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY avg_four IS
   PORT( 
      clk        : IN     STD_LOGIC;
      data       : IN     std_logic_vector (15 DOWNTO 0);
      data_ready : IN     STD_LOGIC;
      nReset     : IN     STD_LOGIC;
      avg_out    : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0);
      count_out  : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0);
      err        : OUT    STD_LOGIC;
      modwait    : OUT    STD_LOGIC
   );

-- Declarations

END avg_four ;

--
-- VHDL Architecture My_Lib.avg_four.struct
--
-- Created:
--          by - mg28.bin (srge08.ecn.purdue.edu)
--          at - 19:58:28 09/09/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.2 (Build 10)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.std_logic_unsigned.all;
LIBRARY ECE337_IP;
USE ECE337_IP.all;

--LIBRARY ECE337_IP;
--LIBRARY My_Lib;

ARCHITECTURE struct OF avg_four IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL A      : STD_LOGIC_VECTOR(3 DOWNTO 0);
   SIGNAL A_sync : STD_LOGIC;
   SIGNAL dr     : STD_LOGIC;
   SIGNAL B      : STD_LOGIC_VECTOR(3 DOWNTO 0);
   SIGNAL C      : STD_LOGIC_VECTOR(3 DOWNTO 0);
   SIGNAL V      : std_logic;
   SIGNAL cnt_up : STD_LOGIC;
   SIGNAL op     : std_logic_vector(1 DOWNTO 0);
   SIGNAL outreg : std_logic_vector(15 DOWNTO 0);


   -- Component Declarations
   COMPONENT datapath
   PORT (
      A      : IN     std_logic_vector (3 DOWNTO 0);
      B      : IN     std_logic_vector (3 DOWNTO 0);
      C      : IN     std_logic_vector (3 DOWNTO 0);
      clk    : IN     std_logic;
      data   : IN     std_logic_vector (15 DOWNTO 0);
      nReset : IN     std_logic;
      op     : IN     std_logic_vector (1 DOWNTO 0);
      V      : OUT    std_logic;
      outreg : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT controller
   PORT (
      V       : IN     STD_LOGIC;
      clk     : IN     STD_LOGIC;
      dr      : IN     STD_LOGIC;
      nReset  : IN     STD_LOGIC;
      A       : OUT    STD_LOGIC_VECTOR (3 DOWNTO 0);
      B       : OUT    STD_LOGIC_VECTOR (3 DOWNTO 0);
      C       : OUT    STD_LOGIC_VECTOR (3 DOWNTO 0);
      cnt_up  : OUT    STD_LOGIC;
      err     : OUT    STD_LOGIC;
      modwait : OUT    STD_LOGIC;
      op      : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT counter
   PORT (
      clk       : IN     STD_LOGIC;
      cnt_up    : IN     STD_LOGIC;
      nReset    : IN     STD_LOGIC;
      count_out : OUT    STD_LOGIC_VECTOR (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT sync
   PORT (
      A      : IN     STD_LOGIC;
      clk    : IN     STD_LOGIC;
      nReset : IN     STD_LOGIC;
      A_sync : OUT    STD_LOGIC
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   --FOR ALL : controller USE ENTITY controller;
   --FOR ALL : counter USE ENTITY counter;
   --FOR ALL : datapath USE ENTITY ECE337_IP.datapath;
   --FOR ALL : sync USE ENTITY sync;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1           
   avg_out <= "00" & outreg(15 DOWNTO 2);                            


   -- Instance port mappings.
   U_3 : datapath
      PORT MAP (
         clk    => clk,
         nReset => nReset,
         A      => A,
         B      => B,
         C      => C,
         data   => data,
         op     => op,
         V      => V,
         outreg => outreg
      );
   U_2 : controller
      PORT MAP (
         clk     => clk,
         nReset  => nReset,
         dr      => dr,
         V       => V,
         cnt_up  => cnt_up,
         modwait => modwait,
         op      => op,
         A       => A,
         B       => B,
         C       => C,
         err     => err
      );
   U_1 : counter
      PORT MAP (
         clk       => clk,
         nReset    => nReset,
         cnt_up    => cnt_up,
         count_out => count_out
      );
   U_0 : sync
      PORT MAP (
         clk    => clk,
         nReset => nReset,
         A      => data_ready,
         A_sync => A_sync
      );

END struct;
